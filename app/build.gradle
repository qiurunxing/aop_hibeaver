apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.qrx.aop_hibeaver"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}


apply plugin: 'hiBeaver'
import com.bryansharp.gradle.hibeaver.utils.MethodLogAdapter
import org.objectweb.asm.ClassVisitor
import org.objectweb.asm.MethodVisitor
import org.objectweb.asm.Opcodes

hiBeaver {
    //设置为true可以显示帮助内容，默认为true
    showHelp = true
    //keepQuiet默认为false,为true时不会有字节码修改的log输出，建议为false
    keepQuiet = false
    //下面的参数设置为true时会输出工程编译耗时信息
    watchTimeConsume = false
    modifyMatchMaps = [
            //类名称匹配规则，*表示任意长度任意字符，|为分隔符，可以理解为或
            '*Activity|*Receiver|*Service|!android*': [
                    //方法名匹配规则与类名类似，同时也支持正则表达式匹配（需要加r:）；adapter后为一个闭包，进行具体的修改
                    ['methodName': 'on**', 'methodDesc': null, 'adapter': {
                            //下面这些为闭包传入的参数，可以帮助我们进行方法过滤，以及根据方法参数来调整字节码修改方式
                        ClassVisitor cv, int access, String name, String desc, String signature, String[] exceptions ->
                            //这里我们有了ClassVisitor实例，其实可以为类添加新的方法。
                            MethodVisitor methodVisitor = cv.visitMethod(access, name, desc, signature, exceptions);
                            MethodVisitor adapter = new MethodLogAdapter(methodVisitor) {

                                @Override
                                void visitCode() {
                                    super.visitCode();
                                    methodVisitor.visitLdcInsn(name)
                                    //实例对象入栈
//                                    methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
                                    //下面两句我们将方法的名称和描述作为常量入栈
//                                    methodVisitor.visitLdcInsn(name);
//                                    methodVisitor.visitLdcInsn(desc);
                                    //调用我们的静态方法
                                    methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,
                                            //下面这个MethodLogAdapter.className2Path(String)为
                                            // hibeaver插件提供的方法，可以将类名转为路径名
                                            className2Path("com.qrx.aop_hibeaver.utils.CommonUtil"),
                                            "MethodStart", "(Ljava/lang/String;)V",false)
                                }

                                @Override
                                void visitInsn(int opcode) {

                                    //在返回之前  或者  抛出异常的时候
                                    if ((opcode >= Opcodes.IRETURN && opcode <= Opcodes.RETURN) || opcode == Opcodes.ATHROW) {
                                        methodVisitor.visitLdcInsn(name)
                                        methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,
                                                className2Path("com.qrx.aop_hibeaver.utils.CommonUtil"),
                                                "MethodEnd", "(Ljava/lang/String;)V",false)
                                    }
                                    super.visitInsn(opcode)
                                }
                            }
                            return adapter;
                    }]
            ]
    ]
}
